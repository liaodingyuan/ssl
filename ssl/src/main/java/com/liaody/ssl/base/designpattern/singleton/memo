1.定义：确保某一个类只有一个实例， 而且自行实例化并向整个系统提供这个实例。
2.注意事项

    --采用单例的时候注意GC的回收
3.单例的优点：... 全局访问点
4.单例的缺点：单例的扩展性很差，以按没有接口；不能mock，不方便测试；单例把业务逻辑和“要单例“合并在一起，违反了
单一原则。
5.使用场景：要求类有且仅有一个对象、要求唯一序列号的环境、
在整个项目中需要一个共享访问点或共享数据， 例如一个Web页面上的计数器， 可以
不用把每次刷新都记录到数据库中， 使用单例模式保持计数器的值， 并确保是线程安全的；
创建一个对象需要消耗的资源过多， 如要访问IO和数据库等资源；
需要定义大量的静态常量和静态方法（如工具类） 的环境， 可以采用单例模式（当然， 也可以直接声明为static的方式）
6.注意事项
1）高并发下要注意线程安全的问题：使用饿汉式的单例式不会出现线程安全问题的。（要知道单例模式的多种实现方式）
2）需要考虑对象的复制问题。不要实现Cloneable接口，否则反序列化可以在创建一个类的实例的。
总结：确保实例只有一个，尤其是多线程环境；确保反序列换时不会重新构建对象。